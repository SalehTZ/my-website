[{"categories":["Flutter","UI","Performance"],"content":"A practical breakdown of shrinkWrap and slivers in Flutter with code examples, use-cases, and when to use each approach.","date":"2025-04-23","objectID":"/shrinkwrap_vs_slivers/","tags":["Flutter","ShrinkWrap","Slivers","UI Optimization"],"title":"ShrinkWrap vs Slivers in Flutter","uri":"/shrinkwrap_vs_slivers/"},{"categories":["Flutter","UI","Performance"],"content":"🧠 Summary: ShrinkWrap vs Slivers in Flutter In Flutter, managing scrollable widgets efficiently is crucial for optimal performance and user experience. This post explores two primary approaches: utilizing shrinkWrap and employing Slivers. ","date":"2025-04-23","objectID":"/shrinkwrap_vs_slivers/:1:0","tags":["Flutter","ShrinkWrap","Slivers","UI Optimization"],"title":"ShrinkWrap vs Slivers in Flutter","uri":"/shrinkwrap_vs_slivers/"},{"categories":["Flutter","UI","Performance"],"content":"🔹 ShrinkWrap Definition: A property that, when set to true, forces the scrollable widget to size itself based on its children rather than expanding to fill available space. Use-Cases: Embedding a scrollable widget inside another scrollable (e.g., a ListView inside a Column). Situations where the number of child widgets is limited and known. Considerations: Can lead to performance issues if used with a large number of children, as it requires computing the size of all children upfront. May cause layout constraints and overflow errors if not managed carefully. ✅ Example with shrinkWrap Column( children: [ Text('Header'), ListView.builder( shrinkWrap: true, physics: NeverScrollableScrollPhysics(), itemCount: 5, itemBuilder: (context, index) =\u003e ListTile( title: Text('Item \\$index'), ), ), ], ) ","date":"2025-04-23","objectID":"/shrinkwrap_vs_slivers/:1:1","tags":["Flutter","ShrinkWrap","Slivers","UI Optimization"],"title":"ShrinkWrap vs Slivers in Flutter","uri":"/shrinkwrap_vs_slivers/"},{"categories":["Flutter","UI","Performance"],"content":"🔹 Slivers Definition: Specialized widgets that can produce scrollable areas with custom behaviors, allowing for more granular control over scrolling effects. Use-Cases: Creating complex scrolling effects, such as collapsing toolbars or infinite scrolling lists. Optimizing performance for large datasets by rendering only visible items. Considerations: Requires a deeper understanding of Flutter’s rendering pipeline. More verbose and complex to implement compared to standard scrollable widgets. ✅ Example with Slivers CustomScrollView( slivers: [ SliverAppBar( expandedHeight: 200.0, floating: false, pinned: true, flexibleSpace: FlexibleSpaceBar( title: Text('Sliver Demo'), ), ), SliverList( delegate: SliverChildBuilderDelegate( (context, index) =\u003e ListTile( title: Text('Item \\$index'), ), childCount: 20, ), ), ], ) ","date":"2025-04-23","objectID":"/shrinkwrap_vs_slivers/:1:2","tags":["Flutter","ShrinkWrap","Slivers","UI Optimization"],"title":"ShrinkWrap vs Slivers in Flutter","uri":"/shrinkwrap_vs_slivers/"},{"categories":["Flutter","UI","Performance"],"content":"🆚 Comparison Aspect ShrinkWrap Slivers Complexity Simpler to implement More complex, requires understanding of Sliver widgets Performance Less efficient with large datasets Optimized for performance with large datasets Flexibility Limited customization Highly customizable scrolling behaviors Use-Case Small, nested scrollable widgets Advanced scrolling effects and large lists ","date":"2025-04-23","objectID":"/shrinkwrap_vs_slivers/:1:3","tags":["Flutter","ShrinkWrap","Slivers","UI Optimization"],"title":"ShrinkWrap vs Slivers in Flutter","uri":"/shrinkwrap_vs_slivers/"},{"categories":["Flutter","UI","Performance"],"content":"📝 Conclusion Choosing between shrinkWrap and Slivers depends on the specific requirements of your Flutter application. For simple, nested scrollable widgets with a limited number of children, shrinkWrap offers a straightforward solution. However, for complex scrolling behaviors and performance optimization with large datasets, leveraging Slivers is the recommended approach. Understanding these tools and their appropriate use-cases is essential for building efficient and responsive Flutter applications. ","date":"2025-04-23","objectID":"/shrinkwrap_vs_slivers/:2:0","tags":["Flutter","ShrinkWrap","Slivers","UI Optimization"],"title":"ShrinkWrap vs Slivers in Flutter","uri":"/shrinkwrap_vs_slivers/"},{"categories":[],"content":"Improve your Flutter app's performance by using ListView.builder instead of ListView.","date":"2025-03-27","objectID":"/tipntrick1/","tags":["tips","flutter"],"title":"Flutter Tip: Optimize Your ListView Performance with `ListView.builder`","uri":"/tipntrick1/"},{"categories":[],"content":"🚀 Flutter Tip: Optimize Your ListView Performance with ListView.builder When displaying a long list of items in Flutter, using a simple ListView can lead to performance issues because all items are built at once. Instead, use ListView.builder, which builds only the visible items, improving performance significantly. ","date":"2025-03-27","objectID":"/tipntrick1/:1:0","tags":["tips","flutter"],"title":"Flutter Tip: Optimize Your ListView Performance with `ListView.builder`","uri":"/tipntrick1/"},{"categories":[],"content":"✨ Example: ListView.builder( itemCount: 1000, // Large number of items itemBuilder: (context, index) { return ListTile( title: Text('Item \\$index'), ); }, ) ","date":"2025-03-27","objectID":"/tipntrick1/:1:1","tags":["tips","flutter"],"title":"Flutter Tip: Optimize Your ListView Performance with `ListView.builder`","uri":"/tipntrick1/"},{"categories":[],"content":"🔥 Why use ListView.builder? ✅ Efficient Rendering: Only builds items when they are visible. ✅ Reduced Memory Usage: Keeps the widget tree light and responsive. ✅ Smooth Scrolling: Prevents lag and stutter in long lists. Using ListView.builder ensures a smoother user experience, especially when working with dynamic lists. Try it in your project today! 🚀 ","date":"2025-03-27","objectID":"/tipntrick1/:1:2","tags":["tips","flutter"],"title":"Flutter Tip: Optimize Your ListView Performance with `ListView.builder`","uri":"/tipntrick1/"},{"categories":[],"content":"Welcome to My Blog 🚀 This is my first post — a small milestone that marks the beginning of my journey here. Success Thank you for visiting my website! 🎉 I’m excited to share my thoughts, projects, and experiences with you. ","date":"2025-03-25","objectID":"/first_post/:0:0","tags":[],"title":"First Post","uri":"/first_post/"},{"categories":[],"content":"🌱 Why This Blog? I created this space as a personal knowledge hub — a place to document what I learn, build, and discover. Writing helps clarify thoughts, and sharing them might help others too. Whether you’re here to learn, get inspired, or just curious — welcome aboard! Here’s what you can expect: Tech Articles — Flutter, IoT, and modern web development Tutorials \u0026 Code Snippets Project Stories — Real challenges and solutions Random Thoughts — Because not everything needs a category 😉 ","date":"2025-03-25","objectID":"/first_post/:1:0","tags":[],"title":"First Post","uri":"/first_post/"},{"categories":[],"content":"🔥 Topics I’m Passionate About Some areas that excite me: Flutter \u0026 Mobile Development Internet of Things (IoT) Smart Home Systems Clean Code \u0026 Best Practices Markdown, Documentation, and Blogging ","date":"2025-03-25","objectID":"/first_post/:2:0","tags":[],"title":"First Post","uri":"/first_post/"},{"categories":[],"content":"✍️ My Goal “The best way to learn is to teach.” Through this blog, I aim to grow, connect, and share what I know — hoping it benefits someone out there. Tip Stay tuned! More content is coming soon. You can bookmark this site or follow me on GitHub / LinkedIn if you’d like updates. ","date":"2025-03-25","objectID":"/first_post/:3:0","tags":[],"title":"First Post","uri":"/first_post/"},{"categories":[],"content":"☕ Final Words Thanks again for being here. Feel free to reach out, comment, or even suggest topics you’d like me to write about. Let’s learn and build together! Until next time, happy coding! — Saleh Talebi Zadeh","date":"2025-03-25","objectID":"/first_post/:4:0","tags":[],"title":"First Post","uri":"/first_post/"},{"categories":null,"content":"A brief introduction to who I am and what I do.","date":"2019-08-02","objectID":"/about/","tags":[],"title":"About Me","uri":"/about/"},{"categories":null,"content":"🧑🏻 About Me 🎯 I’m Mohammad Saleh Talebi Zadeh, a passionate Flutter developer with a strong background in IoT and smart home technologies. I specialize in building efficient, scalable, and high-performance applications, leveraging my experience in Riverpod, MQTT, UDP communication, UI/UX using Figma, and Linux/Ubuntu systems. ","date":"2019-08-02","objectID":"/about/:1:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":null,"content":"🔮 What I Do 🚀 Flutter Development: Creating modern, cross-platform mobile applications with Riverpod, custom widgets, and efficient state management. IoT \u0026 Smart Home Solutions: Developing and integrating local and cloud-based IoT systems using MQTT, UDP, and other communication protocols. UI/UX: Designing intuitive and user-friendly interfaces using Figma. Linux \u0026 System Administration: Configuring, optimizing, and maintaining Ubuntu-based environments for development and deployment. Open Source \u0026 Community: Founder of Persian Flutter Community, contributing to the growth of Flutter developers in the Persian-speaking world. ","date":"2019-08-02","objectID":"/about/:2:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":null,"content":"🛠️ Projects \u0026 Experience 🚀 Developed a smart home app for controlling IoT devices via local UDP and MQTT. 💬 Built a local chat app with UDP socket communication and Riverpod for state management. 📝 Created a Note app with efficient storage and a clean UI. ","date":"2019-08-02","objectID":"/about/:3:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":null,"content":"🎓 Education 📖 Bachelor’s Degree: Computer Science Shahid Bahonar University, Kerman, Iran Sep 2016 - Sep 2020 ","date":"2019-08-02","objectID":"/about/:4:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":null,"content":"🌍 Languages 🗣️ English: Fluent Persian: Native ","date":"2019-08-02","objectID":"/about/:5:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":null,"content":"🤝 Get in Touch 📩 I’m always open to collaboration and discussions on Flutter, IoT, Linux, and software development. Let’s connect! ","date":"2019-08-02","objectID":"/about/:6:0","tags":[],"title":"About Me","uri":"/about/"},{"categories":null,"content":"📊 GitHub Stats ","date":"2019-08-02","objectID":"/about/:7:0","tags":[],"title":"About Me","uri":"/about/"}]